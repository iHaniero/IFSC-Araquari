# -*- coding: utf-8 -*-
"""Coisa Feia

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XG3ZfcwJlsobLiVwC74QjuUqwJeu6pXk
"""

from enum import Enum

class Builder(Enum):
  FENDER = "fender"
  MARTIN = "martin"
  GIBSON = "gibson"
  COLLINGS = "collings"
  OLSON = "olson"
  RYAN = "ryan"
  PRS = "prs"
  ANY = "any"

class TypeG(Enum):
  ACOUSTIC = "acoustic"
  ELECTRIC = "electric"

class Wood(Enum):
  INDIAN_ROSEWOOD = "indian_rosewood"
  BRAZILIAN_ROSEWOOD = "brazilian_rosewood"
  MAHOGANY = "mahogany"
  MAPLE = "maple"
  COCOBOLO = "ococobolo"
  CEDAR = "cedar"
  ADIRONDACK = "adirondack"
  ALDER = "alder"
  SITKA = "sitka"


class Guitar():
  def __init__(self, serialNumber, price, spec):
    self.serialNumber = serialNumber
    self.price = price
    self.spec = spec

  def getSerialNumber(self):
    return self.serialNumber

  def getPrice(self):
    return self.price

  def getSpec(self):
    return self.spec

class GuitarSpec():
  def __init__(self, builder, model, typeG, backWood, topWood, numStrings):
    self.builder = builder
    self.model = model
    self.typeG = typeG
    self.backWood = backWood
    self.topWood = topWood
    self.numStrings = numStrings

  def getBuilder(self):
    return self.builder

  def getTypeG(self):
    return self.typeG

  def getModel(self):
    return self.model

  def getBackWood(self):
    return self.backWood

  def getTopWood(self):
    return self.topWood

  def getNumStrings(self):
    return self.numStrings

  def matches(self, otherSpec):
    if self.builder != otherSpec.getBuilder():
      return False
    if self.model and self.model.lower() != otherSpec.getModel().lower():
      return False
    if self.typeG != otherSpec.getTypeG():
      return False
    if self.backWood != otherSpec.getBackWood():
      return False
    if self.topWood != otherSpec.getTopWood():
      return False
    if self.numStrings != otherSpec.getNumStrings():
      return False
    return True

class Inventory():
  def __init__(self):
    self.guitars = []

  def addGuitar(self, serialNumber, price, spec):
    guitar = Guitar(serialNumber, price, spec)
    self.guitars.append(guitar)

  def getGuitar(self, serialNumber):
    for guitar in self.guitars:
      if guitar.getSerialNumber() == serialNumber:
          return guitar
    return None

  def search(self, searchGuitar):
    matchingGuitars = []
    for guitar in self.guitars:
      if guitar.getSpec().matches(searchGuitar):
                matchingGuitars.append(guitar)
    return matchingGuitars

def initializeInventory(inventory):
    spec1 = GuitarSpec(Builder.FENDER, "stratocastor", TypeG.ELECTRIC, Wood.ALDER, Wood.ALDER, 6)
    inventory.addGuitar("V95693", 1499.95, spec1)
    inventory.addGuitar("V99999", 1599.95, spec1)

    #spec2 = GuitarSpec(Builder.MARTIN, "D-18", TypeG.ACOUSTIC, Wood.MAHOGANY, Wood.ADIRONDACK, 6)
    #inventory.addGuitar("122784", 5495.95, spec2)
    #inventory.addGuitar("76531", 6295.95, Builder.MARTIN, "OM-28", TypeG.ACOUSTIC, Wood.BRAZILIAN_ROSEWOOD, Wood.ADIRONDACK, 6)
    #inventory.addGuitar("70108276", 2295.95, Builder.GIBSON, "Les Paul", TypeG.ELECTRIC, Wood.MAHOGANY, Wood.MAHOGANY, 6)
    #inventory.addGuitar("82765501", 1890.95, Builder.GIBSON, "SG '61 Reissue", TypeG.ELECTRIC, Wood.MAHOGANY, Wood.MAHOGANY, 6)
    #inventory.addGuitar("77023", 6275.95, Builder.MARTIN, "D-28", TypeG.ACOUSTIC, Wood.BRAZILIAN_ROSEWOOD, Wood.ADIRONDACK, 6)


def main():
    inventory = Inventory()
    initializeInventory(inventory)

    whatErinLikes = GuitarSpec(Builder.FENDER, "Stratocastor", TypeG.ELECTRIC, Wood.ALDER, Wood.ALDER, 6)
    matchingGuitars = inventory.search(whatErinLikes)

    if matchingGuitars:
        print("Erin, talvez você goste destas: ")
        for guitar in matchingGuitars:
            guitarSpec = guitar.getSpec()
            print(f"\nGuitarra: {guitar.getSerialNumber()} {guitarSpec.getBuilder().value} {guitarSpec.getModel()} {guitarSpec.getTypeG().value} guitar:\n{guitarSpec.getBackWood().value} na traseira e laterais,\n{guitarSpec.getTopWood().value} no tampo, com {guitarSpec.getNumStrings()} cordas\nEla pode ser sua por apenas US${guitar.getPrice():.2f}!")
    else:
        print("Desculpe Erin, não temos nada para você")

if __name__ == '__main__':
    main()

# Testando o Sistema

# Set up Rick’s guitar inventory
inventory = Inventario()

# Adiciona guitarras ao estoque
inventory.add_Guitar("V95693", 1499.95, Builder.FENDER.value, "Stratocastor", TypeG.ELETRIC.value, Wood.ALDER.value, Wood.ALDER.value)
#inventory.add_guitar("11277", 3999.95, Builder.COLLINGS.value, "Stratocastor", TypeG.ACOUSTIC.value, Wood.INDIAN_ROSEWOOD.value, Wood.INDIAN_ROSEWOOD.value)


# Buscando por uma guitarra que o Erin gosta: Fender Stratocastor elétrica com corpo de Alder e tampo de Alder
whatErinLikes = GuitarSpec(Builder.FENDER.value, "Stratocastor", TypeG.ELETRIC.value, Wood.ALDER.value, Wood.ALDER.value)
guitar = inventory.search_guitar(whatErinLikes)

if guitar is not None:
  for g in guitar:
    guitarspec = g.get_Specs()
  print(f"Erin, talvez você goste desta: {guitarspec.get_Builder()} {guitarspec.get_Modelo()} {guitarspec.get_TipoG()} guitar:\n\n {guitarspec.get_BWood()} na traseira e laterais, \n {guitarspec.get_FWood()} no tampo.\n\n Ela pode ser sua por apenas US${g.get_Preco()}!")
else:
  print("Desculpe Erin, não temos nada para você")