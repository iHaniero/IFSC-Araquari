# -*- coding: utf-8 -*-
"""Parte I - Introdução à POO (Polimorfismo) - Lista 03 (exercícios)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yXaXs0u9YmLM3hwnqCI5BU0fVYGZ-vA2

**1. Crie uma hierarquia de classes para animais, com uma classe mãe Animal e subclasses Cachorro,
Gato e Peixe. Cada subclasse deve ter um método falar() que retorne uma string
representando o som que o animal faz. Demonstre o polimorfismo chamando falar() nas
instâncias de cada subclasse.**
"""

class Animal():
  def __init__(self, nome, idade, cor):
    self._nome = nome
    self._idade = idade
    self._cor = cor

class Cachorro(Animal):
  def __init__(self, nome, idade, cor):
    super().__init__(nome, idade, cor)

  def falar(self):
    return "au au"

class Gato(Animal):
  def __init__(self, nome, idade, cor):
    super().__init__(nome, idade, cor)

  def falar(self):
    return "miau miau"

class Peixe(Animal):
  def __init__(self, nome, idade, cor):
    super().__init__(nome, idade, cor)

  def falar(self):
    return "blubub"

Gato1 = Gato("Torá", 2 , "Marrom")
Cachorro1 = Cachorro("Salcicha", 5, "Marrom")
Peixe1 = Peixe("Nemo", 1, "Azul")

for Animal in (Cachorro1, Gato1, Peixe1):
  print(Animal.falar())

"""**2. Crie uma classe Animal com um método falar(). Em seguida, crie duas classes filhas,
Cachorro e Gato, que herdam da classe Animal. Cada uma destas classes filhas deve ter seu
próprio método falar() que retorne um som diferente (e.g. latidos para o cachorro e miados para
o gato). Em seguida, crie uma lista de animais que inclua um cachorro e um gato. Por fim, itere
sobre a lista e chame o método falar() de cada animal.**
"""

class Animal():
  def __init__(self, nome, idade, cor):
    self._nome = nome
    self._idade = idade
    self._cor = cor

  def falar(self):
    return "som do animal"

class Cachorro(Animal):
  def __init__(self, nome, idade, cor):
    super().__init__(nome, idade, cor)

  def falar(self):
    return "au au"

class Gato(Animal):
  def __init__(self, nome, idade, cor):
    super().__init__(nome, idade, cor)

  def falar(self):
    return "miau miau"

Cachorro1 = Cachorro("Salcicha", 5, "Marrom")
Gato1 = Gato("Torá", 2 , "Marrom")

animais = [Cachorro1, Gato1]

for animal in animais:
  print(animal.falar())

"""**3. Crie uma classe chamada Carro com um método dirigir(). Em seguida, crie duas subclasses,
CarroGasolina e CarroEletrico, cada uma com sua própria implementação de dirigir().
Demonstre o polimorfismo passando instâncias de ambas as subclasses para uma função que recebe
um objeto Carro.**
"""

class Carro():
  def __init__(self, nome, cor, modelo):
    self._nome = nome
    self._cor = cor
    self._modelo = modelo

class CarroGasolina(Carro):
  def __init__(self, nome, cor, modelo):
    super().__init__(nome, cor, modelo)

  def dirigir(self):
    return "Dirigindo com gasolina"

class CarroEletrico(Carro):
  def __init__(self, nome, cor, modelo):
    super().__init__(nome, cor, modelo)

  def dirigir(self):
    return "Dirigindo com eletricidade"

CarroEletrico1 = CarroEletrico("Tesla", "Azul", "2019")
CarroGasolina1 = CarroGasolina("Ferrari", "Vermelho", "2020")

def dirigir(carro):
  print(carro.dirigir())

dirigir(CarroEletrico1)
dirigir(CarroGasolina1)

"""**4. Crie uma classe Forma com um método area(). Em seguida, crie duas classes filhas, Circulo e
Quadrado, que herdam da classe Forma. Cada uma destas classes filhas deve ter seu próprio
método area() que calcula a área do círculo ou do quadrado, respectivamente. Em seguida, crie
uma lista de formas que inclua um círculo e um quadrado. Por fim, itere sobre a lista e chame o
método area() de cada forma.**
"""

import math

class Forma():
  def area(self):
    if type(self).__name__ == "Quadrado":
      self._area = self._complarg **2
    elif type(self).__name__ == "Circulo":
      self._area = math.pi * (self._r**2)
    print(self._area)

class Quadrado(Forma):
  def __init__(self, Comprimento_Largura):
    self._complarg = Comprimento_Largura

  def area(self):
    return (self._complarg **2)

class Circulo(Forma):
  def __init__(self, Raio):
    self._r = Raio

  def area(self):
    return (math.pi * (self._r**2))

Q1 = Quadrado(2)
C1 = Circulo(2)

formas = [Q1, C1]

for forma in formas:
  print(forma.area())

"""**5. Crie uma classe Empregado com um método pagar_salario(). Em seguida, crie duas classes
filhas, EmpregadoHora e EmpregadoMes, que herdam da classe Empregado. Cada uma das
classes filhas deve ter seu próprio método pagar_salario() que calcula o salário com base no
número de horas trabalhadas ou no salário mensal, respectivamente. Em seguida, crie uma lista de
funcionários que inclua um funcionário horista e um funcionário mensalista. Por fim, itere sobre a
lista e chame o método pagar_salario() de cada funcionário.**
"""

class empregado():
  def pagar_salario():
    pass

class empregadoHora(empregado):
  def __init__(self, nome, salario, horas):
    self._nome = nome
    self._salario = salario
    self._horas = horas

  def pagar_salario(self):
    return self._salario * self._horas

class empregadoMes(empregado):
  def __init__(self, nome, salario, meses):
    self._nome = nome
    self._salario = salario
    self._mes = meses

  def pagar_salario(self):
    return self._salario * self._mes

EH1 = empregadoHora("Jorgim", 10, 32)
EM1 = empregadoMes("JOrvim", 1499, 0.5)

funcionarios = [EH1, EM1]

for funcionario in funcionarios:
  print(funcionario.pagar_salario())

"""**6. Crie uma classe chamada ContaBancaria com os métodos deposito() e retirada(). Crie
duas subclasses: ContaPoupanca e ContaCorrente. Cada uma dessas subclasses deve ter sua
própria taxa de juros (a taxa de juros da Conta Poupança é maior que a da Conta Corrente).**
"""

class ContaBancaria():
  def __init__(self, nome, saldo):
    self._nome = nome
    self._saldo = saldo

  def deposito(self, valor):
    self._saldo += valor + (valor * self._juros)
    print(self._saldo)

  def retirada(self, valor):
    self._saldo -= valor - (valor * self._juros)
    print(self._saldo)

class ContaPoupanca(ContaBancaria):
  def __init__(self, nome, saldo, juros=0.10):
    super().__init__(nome, saldo)
    self._juros = juros

class ContaCorrente(ContaBancaria):
  def __init__(self, nome, saldo, juros=0.05):
    super().__init__(nome, saldo)
    self._juros = juros

CP1 = ContaPoupanca("Jorgim", 800)
CC1 = ContaCorrente("Jorvim", 800)

CP1.deposito(100)
CC1.deposito(100)

CP1.retirada(100)
CC1.retirada(100)

"""**Nesta atividade prática, vamos retornar à classe Usuario que usamos nas atividades anteriores. Para
implementar o princípio do polimorfismo, criaremos uma classe chamada Usuario. A partir dela
criaremos algumas classes como: para calcular o número de pontuações que um usuário tem, e o número
de artigos que ele criou ou editou. Baseado nesta classe (Usuario), vamos criar as classes Autor e
Editor, e ambas calcularão o número de pontuações com o método calcPontuacao(), embora o
valor calculado seja diferente entre estas duas classes.**

**Este é o esqueleto da classe Usuario:**

class Usuario:

pontos = 0

  numeroDeArtigos = 0

  *Métodos vão aqui

1. Acrescente na classe Usuario métodos para definir e obter o número de artigos:

a) setNumeroDeArtigos(self, nart)

b) getNumeroDeArtigos(self)

Obs: variável nart deve ser um inteiro

2. Acrescente à classe o método chamado calcPontuacao(), que realiza os cálculos das pontuações
separadamente para cada classe.

3. Crie uma classe chamada Autor que herda da classe de Usuario. Nesta classe (Autor) crie um
método chamado calcPontuacao() que retorna o número de pontuações usando o seguinte
cálculo:

numeroDeArtigos * 10 + 20

4. Agora crie também uma classe chamada Editor que herda da classe Usuario. Nesta classe
(Editor), crie um método chamado calcPontuacao() que retorne o número de pontuações
usando o seguinte cálculo:

numeroDeArtigos * 6 + 15

5. Crie um objeto chamado autor1, a partir da classe Autor. Agora defina o número de artigos como
8 e imprima as pontuações obtidas pelo autor.

6. Crie outro objeto chamado editor1, a partir da classe Editor. Agora defina o número de artigos
para 15 e imprima as pontuações que o editor ganhou.
"""

class Usuario():
  def __init__(self, pontos, numeroDeArtigos):
    self._pontos = pontos
    self._numeroDeArtigos = numeroDeArtigos

  def setNumeroDeArtigos(self, nart):
    self._numeroDeArtigos = nart

  def getNumeroDeArtigos(self):
    return self._numeroDeArtigos

  def calcPontuacao(self):
    pass

class Autor(Usuario):
  def __init__(self, pontos, numeroDeArtigos):
    super().__init__(pontos, numeroDeArtigos)

  def calcPontuacao(self):
    self.calculo = self._numeroDeArtigos * 10 + 20
    self._pontos += self.calculo
    return self.calculo

class Editor(Usuario):
  def __init__(self, pontos, numeroDeArtigos):
    super().__init__(pontos, numeroDeArtigos)

  def calcPontuacao(self):
    self.calculo = self._numeroDeArtigos * 6 + 15
    self._pontos += self.calculo
    return self.calculo

autor1 = Autor(0, 8)
editor1 = Editor(0, 15)

for autor in (autor1, editor1):
  print(autor.calcPontuacao())