# -*- coding: utf-8 -*-
"""Parte I - Introdução à POO (encapsulamento)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cR_WNqZAmGSHLJ6Rnjbpv6TCj2RxZIOZ
"""

#A

"""**2. Vamos voltar para a classe Usuario que desenvolvemos nas atividades anteriores. Agora vamos
definir o primeiroNome do usuário como uma propriedade privada (private).**
Esta é a classe Usuario:

class Usuario:

**# seu código vai aqui**

**2.1 Crie uma propriedade na classe Usuario chamada primeiroNome e evite que qualquer código
de fora da classe altere o seu valor, usando o modificador de acesso apropriado.**

**2.2 Crie um método para definir o valor da propriedade primeiroNome. Use o modificador de
acesso correto para ele.**

**2.3 Agora, crie um método para retornar o valor primeiroNome.**

**2.4 Crie um objeto chamado usuario1.**
"""

class Usuario():
  def __init__(self, primeiroNome, segundoNome):
    self.__NomeP = primeiroNome
    self.NomeS = segundoNome

  def GetNome(self):
    return f"Olá {self.__NomeP} {self.NomeS}"

usuario1 = Usuario("Joe", "Day")

print(usuario1.GetNome())

"""**3. Crie uma classe chamada Empregado(), com três propriedades: nome, salario (deve ser
privada) e projeto. Ela também possui um método chamado “trabalho()”, que deverá
imprimir o nome do funcionário e o projeto em que ele está trabalhando e um outro método
chamado “mostrar()” para exibir os detalhes desse empregado (i.e. nome e salário). Atente
para o modificador de acesso da propriedade “salario”. Use o método adequado para ter
acesso a ela. Crie um objeto desta classe (i.e. instância) e use os métodos para visualizar os
dados.**
"""

class Empregado():
  def __init__(self, nome, salario, projeto):
    self.Nome = nome
    self.__Salario = salario
    self.Projeto = projeto

  def trabalho(self):
    return f"Empregado: {self.Nome}\nProjeto: {self.Projeto}"
  def mostrar(self):
    return f"Empregado: {self.Nome}\nSalário: {self.__Salario}\nProjeto: {self.Projeto}"

empregado1 = Empregado("Joe", "R$ 100.000,00", "A")

print(f"{empregado1.trabalho()}")
print("")
print(f"{empregado1.mostrar()}")

"""**4. Crie uma classe chamada Robo(). Ela deverá ter duas propriedades privadas: nome e
ano_construcao. Também deverá ter um método de nome “diga_alo()”, para mostrar na
tela o nome do robô e seu ano de construção. Crie os métodos “setters” e “getters”
necessários. Instancie a classe e use os métodos criados para visualizar / atualizar os dados.**
"""

class Robo():
  def __init__(self, nome, ano_construcao):
    self.__Nome = nome
    self.__Ano_C = ano_construcao

  def diga_alo(self):
    return f"Aló sou {self.__Nome} construido em {self.__Ano_C}"

robo1 = Robo("Joe", "1920")

print(robo1.diga_alo())

"""**5. Implemente uma classe chamada Laptop que possua um atributo privado chamado “preco”
que armazena o preço do laptop (sem qualquer validação). Em seguida, implemente um método
para ler esse atributo chamado “get_preco()” e um método para modificar esse atributo
chamado “set_preco()” sem validação também. Em seguida, crie uma instância da classe
Laptop siga estas etapas:**

**• usando o método “get_preco()” imprima o valor do atributo “preco” na tela**

**• usando o método “set_preco()”, defina o valor do atributo “preco” para 3999”**
"""

class Laptop():
  def __init__(self, preco=""):
    self.__Preco = preco

  def get_preco(self):
    return f"{self.__Preco}"
  def set_preco(self, preco):
    self.__Preco = preco

laptop1 = Laptop("100.000,00")

print(laptop1.get_preco())
print("")

laptop1.set_preco("3.999,00")

print(laptop1.get_preco())

"""**6. Implemente uma classe chamada Pessoa que tenha dois atributos privados chamados
“primeiroNome” e “ultimoNome”, respectivamente. Em seguida, implemente métodos
chamados “getPrimeiroNome()” e “getUltimoNome()”, para ler os atributos, e os
métodos “setPrimeiroNome()” e “setUltimoNome()” para atribuir valores a eles. Depois
crie uma instância da classe Pessoa definindo os seguintes valores:**

**primeiroNome = 'João'**

**ultimoNome = 'Carvalho'**

**Após, imprima os valores desses atributos no console.**
"""

class Pessoa():
  def __init__(self, primeiroNome="", ultimoNome=""):
    self.__NomeP = primeiroNome
    self.__NomeU = ultimoNome

  def getPrimeiroNome(self):
    return f"{self.__NomeP}"
  def getUltimoNome(self):
    return f"{self.__NomeU}"

  def setPrimeiroNome(self, RedefP):
    self.__NomeP = RedefP
  def setUltimoNome(self, RedefU):
    self.__NomeU = RedefU

pessoa1 = Pessoa()

pessoa1.setPrimeiroNome("João")
pessoa1.setUltimoNome("Carvalho")

print(f"{pessoa1.getPrimeiroNome()} {pessoa1.getUltimoNome()}")