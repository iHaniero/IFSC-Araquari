# -*- coding: utf-8 -*-
"""Coisa não tão feia.

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AH26mN3ocPKY_6Prcnj17nXF2fj8J2_8
"""

from enum import Enum
from abc import ABC, abstractmethod

class Builder(Enum):
    FENDER = "fender"
    MARTIN = "martin"
    GIBSON = "gibson"
    COLLINGS = "collings"
    OLSON = "olson"
    RYAN = "ryan"
    PRS = "prs"
    ANY = "any"

class TypeG(Enum):
    ACOUSTIC = "acoustic"
    ELECTRIC = "electric"

class Wood(Enum):
    INDIAN_ROSEWOOD = "indian_rosewood"
    BRAZILIAN_ROSEWOOD = "brazilian_rosewood"
    MAHOGANY = "mahogany"
    MAPLE = "maple"
    COCOBOLO = "cocobolo"
    CEDAR = "cedar"
    ADIRONDACK = "adirondack"
    ALDER = "alder"
    SITKA = "sitka"

class Style(Enum):
    COUNTRY = "country"
    ROCK = "rock"
    POP = "pop"
    JAZZ = "jazz"
    CLASSICAL = "classical"
    METAL = "metal"

class Instrument(ABC):
    def __init__(self, serialNumber, price, spec):
        self.serialNumber = serialNumber
        self.price = price
        self.spec = spec

    def getSerialNumber(self):
        return self.serialNumber

    def getPrice(self):
        return self.price

    def setPrice(self, price):
        self.price = price

    def getSpec(self):
        return self.spec

class InstrumentSpec(ABC):
    def __init__(self, builder, model, typeG, backWood, topWood):
        self.builder = builder
        self.model = model
        self.typeG = typeG
        self.backWood = backWood
        self.topWood = topWood

    def getBuilder(self):
        return self.builder

    def getTypeG(self):
        return self.typeG

    def getModel(self):
        return self.model

    def getBackWood(self):
        return self.backWood

    def getTopWood(self):
        return self.topWood

    @abstractmethod
    def matches(self, otherSpec):
        pass

class GuitarSpec(InstrumentSpec):
    def __init__(self, builder, model, typeG, backWood, topWood, numStrings):
        super().__init__(builder, model, typeG, backWood, topWood)
        self.numStrings = numStrings

    def getNumStrings(self):
        return self.numStrings

    def matches(self, otherSpec):
        if self.builder != otherSpec.getBuilder():
            return False
        if self.model and self.model.lower() != otherSpec.getModel().lower():
            return False
        if self.typeG != otherSpec.getTypeG():
            return False
        if self.backWood != otherSpec.getBackWood():
            return False
        if self.topWood != otherSpec.getTopWood():
            return False
        if self.numStrings != otherSpec.getNumStrings():
            return False
        return True

class MandolinSpec(InstrumentSpec):
    def __init__(self, builder, model, typeG, backWood, topWood, style):
        super().__init__(builder, model, typeG, backWood, topWood)
        self.style = style

    def getStyle(self):
        return self.style

    def matches(self, otherSpec):
        if self.builder != otherSpec.getBuilder():
            return False
        if self.model and self.model.lower() != otherSpec.getModel().lower():
            return False
        if self.typeG != otherSpec.getTypeG():
            return False
        if self.backWood != otherSpec.getBackWood():
            return False
        if self.topWood != otherSpec.getTopWood():
            return False
        if self.style != otherSpec.getStyle():
            return False
        return True

class Inventory():
    def __init__(self):
        self.instruments = []

    def addInstrument(self, serialNumber, price, spec):
        instrument = Instrument(serialNumber, price, spec)
        self.instruments.append(instrument)

    def getInstrument(self, serialNumber):
        for instrument in self.instruments:
            if instrument.getSerialNumber() == serialNumber:
                return instrument
        return None

    def searchGuitar(self, searchGuitar):
        matchingGuitars = []
        for instrument in self.instruments:
            if isinstance(instrument.getSpec(), GuitarSpec) and instrument.getSpec().matches(searchGuitar):
                matchingGuitars.append(instrument)
        return matchingGuitars

    def searchMandolin(self, searchMandolin):
        matchingMandolins = []
        for instrument in self.instruments:
            if isinstance(instrument.getSpec(), MandolinSpec) and instrument.getSpec().matches(searchMandolin):
                matchingMandolins.append(instrument)
        return matchingMandolins

def test_inventory():
    # Criar inventário
    inventory = Inventory()

    # Criar especificações de guitarra
    guitar_spec1 = GuitarSpec(
        Builder.FENDER, "Stratocaster", TypeG.ELECTRIC,
        Wood.MAPLE, Wood.ALDER, 6
    )
    guitar_spec2 = GuitarSpec(
        Builder.MARTIN, "D-28", TypeG.ACOUSTIC,
        Wood.INDIAN_ROSEWOOD, Wood.CEDAR, 6
    )

    # Criar especificações de mandolin
    mandolin_spec1 = MandolinSpec(
        Builder.GIBSON, "F-5", TypeG.ACOUSTIC,
        Wood.BRAZILIAN_ROSEWOOD, Wood.SITKA, Style.CLASSICAL
    )

    # Adicionar instrumentos ao inventário
    inventory.addInstrument("123456", 1500, guitar_spec1)
    inventory.addInstrument("123457", 2500, guitar_spec2)
    inventory.addInstrument("123458", 3500, mandolin_spec1)

    # Buscar instrumentos
    search_guitar = GuitarSpec(
        Builder.FENDER, "Stratocaster", TypeG.ELECTRIC,
        Wood.MAPLE, Wood.ALDER, 6
    )
    search_mandolin = MandolinSpec(
        Builder.GIBSON, "F-5", TypeG.ACOUSTIC,
        Wood.BRAZILIAN_ROSEWOOD, Wood.SITKA, Style.CLASSICAL
    )

    matchingGuitars = inventory.searchGuitar(search_guitar)
    matchingMandolins = inventory.searchMandolin(search_mandolin)

    # Verificar resultados
    if matchingGuitars:
        print("Rick, talvez você goste destas: ")
        for guitar in matchingGuitars:
            guitarSpec = guitar.getSpec()
            print(f"\nGuitarra: {guitar.getSerialNumber()}\n{guitarSpec.getBuilder().value} {guitarSpec.getModel()} {guitarSpec.getTypeG().value} \n{guitarSpec.getBackWood().value} na traseira e laterais,\n{guitarSpec.getTopWood().value} no tampo, com {guitarSpec.getNumStrings()} cordas\n\nEla pode ser sua por apenas US${guitar.getPrice():.2f}!")
    else:
        print("Desculpe Rick, não temos nada para você")

    print("\n")

    if matchingMandolins:
        print("Jose, talvez você goste destas: ")
        for mandolin in matchingMandolins:
            mandolinSpec = mandolin.getSpec()
            print(f"\nMandolin: {mandolin.getSerialNumber()}\n{mandolinSpec.getBuilder().value} {mandolinSpec.getModel()} {mandolinSpec.getTypeG().value} \n{mandolinSpec.getBackWood().value} na traseira e laterais,\n{mandolinSpec.getTopWood().value} no tampo, com {mandolinSpec.getStyle().value} cordas\n\nEla pode ser sua por apenas US${mandolin.getPrice():.2f}!")
    else:
        print("Desculpe Jose, não temos nada para você")

# Executar o teste
test_inventory()

def initializeInventory(inventory):
    spec1 = GuitarSpec(Builder.FENDER, "stratocastor", TypeG.ELECTRIC, Wood.ALDER, Wood.ALDER, 6)
    inventory.addInstrument("V95693", 1499.95, spec1)
    inventory.addInstrument("V99999", 1599.95, spec1)

    #spec2 = GuitarSpec(Builder.MARTIN, "D-18", TypeG.ACOUSTIC, Wood.MAHOGANY, Wood.ADIRONDACK, 6)
    #inventory.addGuitar("122784", 5495.95, spec2)
    #inventory.addGuitar("76531", 6295.95, Builder.MARTIN, "OM-28", TypeG.ACOUSTIC, Wood.BRAZILIAN_ROSEWOOD, Wood.ADIRONDACK, 6)
    #inventory.addGuitar("70108276", 2295.95, Builder.GIBSON, "Les Paul", TypeG.ELECTRIC, Wood.MAHOGANY, Wood.MAHOGANY, 6)
    #inventory.addGuitar("82765501", 1890.95, Builder.GIBSON, "SG '61 Reissue", TypeG.ELECTRIC, Wood.MAHOGANY, Wood.MAHOGANY, 6)
    #inventory.addGuitar("77023", 6275.95, Builder.MARTIN, "D-28", TypeG.ACOUSTIC, Wood.BRAZILIAN_ROSEWOOD, Wood.ADIRONDACK, 6)


def main():
    inventory = Inventory()
    initializeInventory(inventory)

    whatErinLikes = GuitarSpec(Builder.FENDER, "Stratocastor", TypeG.ELECTRIC, Wood.ALDER, Wood.ALDER, 6)
    matchingGuitars = inventory.search(whatErinLikes)

    if matchingGuitars:
        print("Erin, talvez você goste destas: ")
        for guitar in matchingGuitars:
            guitarSpec = guitar.getSpec()
            print(f"\nGuitarra: {guitar.getSerialNumber()} {guitarSpec.getBuilder().value} {guitarSpec.getModel()} {guitarSpec.getTypeG().value} guitar:\n{guitarSpec.getBackWood().value} na traseira e laterais,\n{guitarSpec.getTopWood().value} no tampo, com {guitarSpec.getNumStrings()} cordas\nEla pode ser sua por apenas US${guitar.getPrice():.2f}!")
    else:
        print("Desculpe Erin, não temos nada para você")

if __name__ == '__main__':
    main()