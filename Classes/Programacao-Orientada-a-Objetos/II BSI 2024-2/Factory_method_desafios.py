# -*- coding: utf-8 -*-
"""Atividade Prática 04  Design Patterns (Padrões de Projeto) – Factory Method  Desafios

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TMP3LIlLwpC0OTXhqzPGdzpwmq8ODonu

**Atividade 1: Sistema de Notificações**

Crie um sistema de notificações que pode enviar mensagens por diferentes canais (Email, SMS,
Push).
Use o Factory Method para criar os diferentes tipos de notificadores.
"""

from abc import ABC, abstractmethod

class Notification(ABC):
    @abstractmethod
    def send(self):
      pass


class Email(Notification):
    def __init__(self, message):
        self.message = message

    def send(self):
        print(f"{self.message} | sent through Email")


class SMS(Notification):
    def __init__(self, message):
        self.message = message

    def send(self):
        print(f"{self.message} | sent through SMS")


class Push(Notification):
    def __init__(self, message):
        self.message = message

    def send(self):
        print(f"{self.message} | sent through Push")

class NotificationFactory():

    def send_via_email(self, message):
        return Email(message)

    def send_via_sms(self, message):
        return SMS(message)

    def send_via_push(self, message):
        return Push(message)


# Exemplo de uso:
factory = NotificationFactory()

# Usuário escolhe o tipo de notificação
notification_type = input("Choose notification type (email/sms/push): ").lower()

# Usuário insere a mensagem
message = input("Please enter the message: ")

# Cria o objeto correspondente e envia a notificação
if notification_type == "email":
    notification = factory.send_via_email(message)
    notification.send()
elif notification_type == "sms":
    notification = factory.send_via_sms(message)
    notification.send()
elif notification_type == "push":
    notification = factory.send_via_push(message)
    notification.send()
else:
    print("Invalid notification type.")

"""**Atividade 2: Gerenciador de Documentos**

Implemente um sistema de gerenciamento de documentos que pode criar diferentes tipos de
documentos (PDF, Word, TXT) usando o Factory Method.
"""

from abc import ABC, abstractmethod

class Document(ABC):
    @abstractmethod
    def text(self):
      pass

class PDF(Document):
    def __init__(self, message):
        self.message = message

    def text(self):
        print(f"{self.message} | sent through PDF")

class Word(Document):
    def __init__(self, message):
        self.message = message

    def text(self):
        print(f"{self.message} | sent through Word")

class TXT(Document):
    def __init__(self, message):
        self.message = message

    def text(self):
        print(f"{self.message} | sent through TXT")

class DocumentFactory():

    def text_via_email(self, message):
        return PDF(message)

    def text_via_sms(self, message):
        return Word(message)

    def text_via_push(self, message):
        return TXT(message)

# Instantiate the factory
factory = DocumentFactory()

# Create a document to be sent via email
email_doc = factory.text_via_email("Hello via email!")
email_doc.text()  # Output: Hello via email! | sent through PDF

# Create a document to be sent via SMS
sms_doc = factory.text_via_sms("Hello via SMS!")
sms_doc.text()  # Output: Hello via SMS! | sent through Word

# Create a document to be sent via push notification
push_doc = factory.text_via_push("Hello via Push!")
push_doc.text()  # Output: Hello via Push! | sent through TXT

"""**Atividade 3: Sistema de Pagamentos**

Desenvolva um sistema de pagamentos que suporte diferentes métodos (Cartão de Crédito, PayPal,
Boleto) usando Factory Method.
"""

from abc import ABC, abstractmethod

class MPagamento(ABC):
    def __init__(self, valor):
      self.valor = valor
      self.juros = 0.0
      self.desconto = 0.0
      self.multa = 0.0

    @abstractmethod
    def calcular_juros(self):
      pass

    @abstractmethod
    def calcular_desconto(self):
      pass

    @abstractmethod
    def calcular_multa(self):
      pass

class CartaoCredito(MPagamento):
    def __init__(self, valor):
        super().__init__(valor)
        self.juros = 0.03
        self.desconto = 0.05
        self.multa = 0.02

    def calcular_juros(self):
      return self.valor * self.juros

    def calcular_desconto(self):
      return self.valor * self.desconto

    def calcular_multa(self):
      return self.valor * self.multa

class PayPal(MPagamento):
    def __init__(self, valor):
        super().__init__(valor)
        self.juros = 0.02
        self.desconto = 0.03
        self.multa = 0.01

    def calcular_juros(self):
      return self.valor * self.juros

    def calcular_desconto(self):
      return self.valor * self.desconto

    def calcular_multa(self):
      return self.valor * self.multa

class Boleto(MPagamento):
    def __init__(self, valor):
        super().__init__(valor)
        self.juros = 0.01
        self.desconto = 0.02
        self.multa = 0.03

    def calcular_juros(self):
      return self.valor * self.juros

    def calcular_desconto(self):
      return self.valor * self.desconto

    def calcular_multa(self):
      return self.valor * self.multa

class BancoFactory():
  def pagar_cartao_credito(self, valor):
    return CartaoCredito(valor)

  def pagar_paypal(self, valor):
    return PayPal(valor)

  def pagar_boleto(self, valor):
    return Boleto(valor)

# Create the factory
factory = BancoFactory()

# Create a CartaoCredito payment with a value of 1000
cartao = factory.pagar_cartao_credito(1000)
print(f"Cartão Crédito - Juros: {cartao.calcular_juros():.2f}")
print(f"Cartão Crédito - Desconto: {cartao.calcular_desconto():.2f}")
print(f"Cartão Crédito - Multa: {cartao.calcular_multa():.2f}")

# Create a PayPal payment with a value of 2000
paypal = factory.pagar_paypal(2000)
print(f"PayPal - Juros: {paypal.calcular_juros():.2f}")
print(f"PayPal - Desconto: {paypal.calcular_desconto():.2f}")
print(f"PayPal - Multa: {paypal.calcular_multa():.2f}")

# Create a Boleto payment with a value of 1500
boleto = factory.pagar_boleto(1500)
print(f"Boleto - Juros: {boleto.calcular_juros():.2f}")
print(f"Boleto - Desconto: {boleto.calcular_desconto():.2f}")
print(f"Boleto - Multa: {boleto.calcular_multa():.2f}")

"""**Atividade 4: Gerador de Relatórios**

Crie um gerador de relatórios que pode produzir relatórios em diferentes formatos (HTML, CSV, JSON)
usando Factory Method.
"""

from abc import ABC, abstractmethod
import json

class Formato(ABC):
    @abstractmethod
    def gerar(self, dados):
        pass

class HTML(Formato):
    def gerar(self, dados):
        html = "<html><body>\n"
        html += "<h1>Relatório</h1>\n<ul>\n"
        for chave, valor in dados.items():
            html += f"  <li><strong>{chave}:</strong> {valor}</li>\n"
        html += "</ul>\n</body></html>"
        return html

class CSV(Formato):
    def gerar(self, dados):
        csv = "Chave,Valor\n"
        for chave, valor in dados.items():
            csv += f"{chave},{valor}\n"
        return csv

class JSON(Formato):
    def gerar(self, dados):
        return json.dumps(dados, indent=4)

class RelatorioFactory:
    def criar_relatorio(self, formato):
        if formato == "HTML":
            return HTML()
        elif formato == "CSV":
            return CSV()
        elif formato == "JSON":
            return JSON()
        else:
            raise ValueError("Formato desconhecido!")

if __name__ == "__main__":

    dados = {
        "Nome": "João Silva",
        "Idade": 30,
        "Cargo": "Analista",
        "Departamento": "TI"
    }

    factory = RelatorioFactory()

    formatos = ["HTML", "CSV", "JSON"]
    for formato in formatos:
        relatorio = factory.criar_relatorio(formato)
        print(f"\n--- Relatório em {formato} ---\n")
        print(relatorio.gerar(dados))

"""**Atividade 5: Sistema de Logística**

Implemente um sistema de logística que pode criar diferentes tipos de transporte (Caminhão, Navio,
Avião) usando Factory Method.
"""

from abc import ABC, abstractmethod

# Classe abstrata da fábrica de veículos
class VeiculoFactory(ABC):
    @abstractmethod
    def criar_caminhao(self, cor, capacidade_carga, potencia_motor):
        pass

    @abstractmethod
    def criar_navio(self, cor, capacidade_carga, comprimento):
        pass

    @abstractmethod
    def criar_aviao(self, cor, capacidade_passageiros, alcance):
        pass


# Classe base para os veículos
class Veiculo(ABC):
    def __init__(self, cor):
        self.cor = cor

    def get_cor(self):
        return self.cor

    @abstractmethod
    def to_string(self):
        pass


# Veículos concretos
class Caminhao(Veiculo):
    def __init__(self, cor, capacidade_carga, potencia_motor):
        super().__init__(cor)
        self.capacidade_carga = capacidade_carga
        self.potencia_motor = potencia_motor

    def to_string(self):
        return f"Caminhão\nCor = {self.cor}\nCapacidade de Carga = {self.capacidade_carga} toneladas\nPotência do Motor = {self.potencia_motor} HP"


class Navio(Veiculo):
    def __init__(self, cor, capacidade_carga, comprimento):
        super().__init__(cor)
        self.capacidade_carga = capacidade_carga
        self.comprimento = comprimento

    def to_string(self):
        return f"Navio\nCor = {self.cor}\nCapacidade de Carga = {self.capacidade_carga} toneladas\nComprimento = {self.comprimento} metros"


class Aviao(Veiculo):
    def __init__(self, cor, capacidade_passageiros, alcance):
        super().__init__(cor)
        self.capacidade_passageiros = capacidade_passageiros
        self.alcance = alcance

    def to_string(self):
        return f"Avião\nCor = {self.cor}\nCapacidade de Passageiros = {self.capacidade_passageiros}\nAlcance = {self.alcance} km"


# Veículos Modernos Concretos
class CaminhaoModerno(Caminhao):
    def __init__(self, cor):
        super().__init__(cor, capacidade_carga=20, potencia_motor=400)


class NavioModerno(Navio):
    def __init__(self, cor):
        super().__init__(cor, capacidade_carga=1000, comprimento=300)


class AviaoModerno(Aviao):
    def __init__(self, cor):
        super().__init__(cor, capacidade_passageiros=200, alcance=5000)


# Fábrica concreta para veículos retro
class RetroVeiculoFactory(VeiculoFactory):
    def criar_caminhao(self, cor, capacidade_carga, potencia_motor):
        return Caminhao(cor, capacidade_carga, potencia_motor)

    def criar_navio(self, cor, capacidade_carga, comprimento):
        return Navio(cor, capacidade_carga, comprimento)

    def criar_aviao(self, cor, capacidade_passageiros, alcance):
        return Aviao(cor, capacidade_passageiros, alcance)


# Fábrica concreta para veículos modernos
class ModernVeiculoFactory(VeiculoFactory):
    def criar_caminhao(self, cor, capacidade_carga=20, potencia_motor=400):
        return CaminhaoModerno(cor)

    def criar_navio(self, cor, capacidade_carga=1000, comprimento=300):
        return NavioModerno(cor)

    def criar_aviao(self, cor, capacidade_passageiros=200, alcance=5000):
        return AviaoModerno(cor)


# Exemplo de uso
if __name__ == "__main__":
    retro_factory = RetroVeiculoFactory()
    modern_factory = ModernVeiculoFactory()

    # Criando veículos usando a fábrica retro
    retro_caminhao = retro_factory.criar_caminhao("vermelho", 15, 250)
    print("\n--- Veículo Retro ---")
    print(retro_caminhao.to_string())

    # Criando veículos usando a fábrica moderna
    modern_aviao = modern_factory.criar_aviao("branco")
    print("\n--- Veículo Moderno ---")
    print(modern_aviao.to_string())