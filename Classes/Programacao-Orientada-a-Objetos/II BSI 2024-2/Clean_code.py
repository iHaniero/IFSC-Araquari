# -*- coding: utf-8 -*-
"""Atividade Pratica 07 - Clean Code

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Jg6piyrYePvmrzYqQ7hhdI2do74DnwM7

`Clean Code` é um conceito que se refere a escrever código que é fácil de ler, entender e manter. Existem vários princípios e práticas para melhorar a qualidade deste código, como usar nomes significativos, evitar comentários desnecessários, seguir convenções de estilo, refatorar código duplicado, aplicar testes automatizados, e assim por diante.

Aqui estão sete exercícios que você pode fazer para praticar o `Clean Code`. Cada exercício tem uma descrição do problema e um exemplo de código ruim. Você deve resolver os exercícios sugerindo uma solução melhorada para ele.

### **Exercício 1: Nomes Significativos**

> Nomes devem ser claros, precisos e consistentes. Evite usar nomes genéricos, abreviações, números mágicos ou comentários para explicar o que o código faz.

#### **Problema**

Escreva uma função que calcule o salário líquido de um funcionário a partir do seu salário bruto e dos impostos aplicados. Use nomes significativos para as variáveis e a função.

##### **Código Ruim**
"""

def f(x):
  y = 0.15 * x  # INSS
  z = 0.275 * x  # IRPF
  return x - y - z

# Example usage:
sb = 10000
sl = f(sb)
print(sl)

"""##### **Código Melhorado**"""

def CalculoDeSalarioLiquido(salario_bruto):
  INSS = 0.15
  IRPF = 0.275

  CalculoINSS = INSS * salario_bruto
  CalculoIRPF = IRPF * salario_bruto
  return salario_bruto - INSS - IRPF

# Example usage:
salarioBruto = 10000
salarioLiquido = CalculoDeSalarioLiquido(salarioBruto)
print(salarioLiquido)

"""### **Exercício 2: Comentários Desnecessários**

> Comentários devem ser usados com moderação e apenas quando o código não é suficiente para expressar a intenção. Comentários devem explicar o porquê do código, não o que ele faz. Evite usar comentários para justificar decisões ruins, documentar código óbvio ou repetir o que o código já diz.

#### **Problema**

Escreva uma função que verifique se um número é par ou ímpar. Remova os comentários desnecessários do código.


##### **Código Ruim**
"""

def isPar(numero):
  # Verifica se o número é par
  if numero % 2 == 0: # Usa o operador módulo para obter o resto da divisão por 2
    return True # Retorna verdadeiro se o resto for zero
  else:
    return False # Retorna falso se o resto for diferente de zero

"""##### **Código Melhorado**"""

def IsPar(numero):
  if numero % 2 == 0:
    return True
  else:
    return False

"""### **Exercício 3: Funções (Métodos)**

> Escreva funções que sejam pequenas, simples e façam apenas uma coisa. Use nomes descritivos para as funções e os parâmetros. Opcionalmente, use `docstrings` para documentar o propósito, os parâmetros e o retorno das funções.

#### **Problema**

Escreva uma função que efetue as quatro operações aritméticas (i.e. soma, subtração, divisão e multiplição), recebendo como parâmetro os dois números e a operação desejada (`+`, `-`, `*` e `/`) em forma de símbolos.

##### **Código Ruim**
"""

def calc(x, y, op):
  # faz uma operação entre dois números
  if op == "+":
    return x + y
  elif op == "-":
    return x - y
  elif op == "*":
    return x * y
  elif op == "/":
    return x / y
  else:
    return "Operação inválida"

"""##### **Código Melhorado**"""

def Calculo(numero1, numero2, operacao):
  if operacao == "+":
    print(f"{OperacaoSoma(numero1, numero2)}")
  elif operacao == "-":
    print(f"{OperacaoSubtracao(numero1, numero2)}")
  elif operacao == "*":
    print(f"{OperacaoMultiplicacao(numero1, numero2)}")
  elif operacao == "/":
    print(f"{OperacaoDivisao(numero1, numero2)}")

def OperacaoSoma(x, y):
  return x + y

def OperacaoSubtracao(x, y):
  return x - y

def OperacaoMultiplicacao(x, y):
  return x * y

def OperacaoDivisao(x, y):
  return x / y

Calculo(10, 5, "+")

"""### **Exercício 4: Estruturas de dados**

> Use as estruturas de dados adequadas para armazenar e manipular os seus dados. Prefira listas, tuplas, dicionários e conjuntos em vez de sequências ou coleções genéricas. Aproveite as características e métodos dessas estruturas para simplificar o seu código.

#### **Problema**

Escreva um programa que armazene as oito notas e os nomes dos estudantes da disciplina de POO II. Calcule a média da turma e imprima os nomes e as notas daqueles ficaram acima da média.

##### **Código Ruim**
"""

# armazena os nomes e as notas dos alunos em uma sequência
alunos = "Ana", "Bruno", "Carla", "Daniel", "Eduardo", "Fernanda", "Gabriel", "Helena"
notas = 8.5, 7.0, 9.0, 6.5, 10.0, 8.0, 7.5, 9.5

# calcula a média das notas dos alunos
soma = 0
for i in range(len(notas)):
  soma += notas[i]
media = soma / len(notas)

# imprime os nomes e as notas dos alunos que ficaram acima da média
for i in range(len(alunos)):
  if notas[i] > media:
      print(alunos[i], notas[i])

"""##### **Código Melhorado**"""

# armazena os nomes e as notas dos alunos em uma sequência
alunos = ["Ana", "Bruno", "Carla", "Daniel", "Eduardo", "Fernanda", "Gabriel", "Helena"]
notas = [8.5, 7.0, 9.0, 6.5, 10.0, 8.0, 7.5, 9.5]

# calcula a média das notas dos alunos
soma = 0
for i in range(len(notas)):
  soma += notas[i]
media = soma / len(notas)

# imprime os nomes e as notas dos alunos que ficaram acima da média
for i in range(len(alunos)):
  if notas[i] > media:
      print(alunos[i], notas[i])

"""### **Exercício 5: Espaçamento em branco**

> Use espaços em branco para melhorar a legibilidade do seu código. Evite espaços extras dentro dos parênteses ou colchetes, evite espaços em branco no final das linhas, circunde os operadores binários com um espaço em cada lado e não use espaços ao redor do sinal de igual quando usado para indicar um argumento com palavra-chave.

#### **Problema**

Escreva duas funções que calculem a área de um círculo e o volume da esfera. Passe como parâmetro o raio.

##### **Código Ruim**
"""

def area_circulo ( raio ) :
    return 3.14159 * ( raio ** 2 ) # calcula a área de um círculo dado o raio

def volume_esfera( raio ):
    return (4 / 3) * 3.14159 * (raio ** 3) # calcula o volume de uma esfera dado o raio

print(area_circulo( 5 )) # imprime a área de um círculo de raio 5
print(volume_esfera(raio = 5)) # imprime o volume de uma esfera de raio 5

"""##### **Código Melhorado**"""

def area_circulo (raio):
    return 3.14159 * (raio**2)

def volume_esfera(raio):
    return (4/3) * 3.14159 * (raio**3)

print(area_circulo(5))
print(volume_esfera(raio=5))

"""### **Exercício 6: Formatação de linhas**

> Siga as regras do [PEP 8](https://peps.python.org/pep-0008/) para formatar as linhas do seu código. Use espaços para indentar, limite a largura das linhas a 79 caracteres, evite múltiplas instruções na mesma linha e separe as definições de funções e classes com duas linhas em branco.

#### **Problema**

Escreva quatro funções que calculem, respectivamente, a soma dos quadrados, a média, a variância e o desvio padrão de uma lista de dados.

##### **Código Ruim**
"""

def soma_quadrados(lista): return sum(x**2 for x in lista) # retorna a soma dos quadrados dos elementos da lista

def media(lista): return sum(lista)/len(lista) # retorna a média dos elementos da lista

def variancia(lista): m = media(lista); return soma_quadrados([x-m for x in lista])/len(lista) # retorna a variância dos elementos da lista

def desvio_padrao(lista): return variancia(lista)**0.5 # retorna o desvio padrão dos elementos da lista

"""##### **Código Melhorado**"""

def soma_quadrados(lista):
  return sum(x**2 for x in lista)


def media(lista):
  return sum(lista)/len(lista)


def variancia(lista):
  m = media(lista)
  return soma_quadrados([x-m for x in lista])/len(lista)


def desvio_padrao(lista):
  return variancia(lista)**0.5

"""### **Exercício 7: Funções com muitos parâmetros**

> Evite funções com um grande número de parâmetros. Refatore para usar classes ou dicionários.

##### **Código Ruim**
"""

# Ruim
def criar_pessoa(nome, idade, cidade, pais, profissao, email):
  return None
    # Código para criar uma pessoa

"""##### **Código Melhorado**"""

class Pessoa():
    def __init__(self, nome, idade, cidade, pais, profissao, email):
        self.nome = nome
        self.idade = idade
        self.cidade = cidade
        self.pais = pais
        self.profissao = profissao
        self.email = email

    def __str__(self):
        return f'{self.nome}, {self.idade} anos, {self.profissao} de {self.pais}'



dados_pessoa = {
    'nome': "João",
    'idade': 30,
    'cidade': "São Paulo",
    'pais': "Brasil",
    'profissao': "Engenheiro",
    'email': "joao@email.com"
}

pessoa = Pessoa(**dados_pessoa)
print(pessoa.nome)