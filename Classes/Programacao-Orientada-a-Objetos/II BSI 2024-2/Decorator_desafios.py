# -*- coding: utf-8 -*-
"""Atividade Prática 03  Design Patterns (Padrões de Projeto) – Decorator  Desafios

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jprmsSDi37IY_ryxm0EWm4c2xd7Yrzd0

**Atividade 2: Processador de Texto**

Crie um processador de texto que permita adicionar diferentes formatações (negrito, itálico,
sublinhado) a um texto base. Utilize decoradores para aplicar as formatações de forma flexível e
combinável.
"""

from abc import ABC, abstractmethod

class Notificador(ABC):

  def __init__(self, canal, mensagem):
    self.canal = canal
    self.mensagem = mensagem

  def get_canal(self):
    return self.canal

  def get_mensagem(self):
    return self.mensagem

  def enviar(self, mensagem):
    return f"Mensagem enviada para {self.canal}: {mensagem}"

class Texto(Notificador):

  def __init__(self, mensagem):
    super().__init__("Texto", mensagem)


class Decorator(Notificador, ABC):

  def __init__(self, notificacao):
        self.notificacao = notificacao
        self.canal = notificacao.get_canal()
        self.mensagem = notificacao.get_mensagem()

  @abstractmethod
  def get_canal(self):
    pass

  @abstractmethod
  def get_mensagem(self):
    pass

  @abstractmethod
  def enviar(self, mensagem):
    pass

class Caps(Decorator):
  def enviar(self, mensagem):
    return self.notificacao.enviar(mensagem.upper())

  def get_canal(self):
    return self.notificacao.get_canal()

  def get_mensagem(self):
    return self.notificacao.get_mensagem()

class Negrito(Decorator):
  def enviar(self, mensagem):
    return self.notificacao.enviar(f"**{mensagem}**")

  def get_canal(self):
    return self.notificacao.get_canal()

  def get_mensagem(self):
    return self.notificacao.get_mensagem()

mensagem1 = Texto("Olá, tudo bem?")
mensagem1 = Caps(mensagem1)
print(mensagem1.enviar(mensagem1.get_mensagem()))

print("")

mensagem2 = Texto("Olá, tudo bem?")
mensagem2 = Negrito(mensagem2)
print(mensagem2.enviar(mensagem2.get_mensagem()))

"""**Atividade 3: Sistema de Café**

Implemente um sistema para uma cafeteria que calcula o preço de bebidas personalizadas. Use
decoradores para adicionar ingredientes extras (leite vaporizado, chocolate, canela) ao café base e
calcular o preço final.
"""

from abc import ABC, abstractmethod

class Cafe(ABC):

  def __init__(self, descricao, preco):
    self.descricao = descricao
    self.preco = preco

  def get_descricao(self):
    return self.descricao

  def get_preco(self):
    return self.preco

class CafeSimples(Cafe):
  def __init__(self):
    super(). __init__("Simples", 2.0)

class Cappucino(Cafe):
  def __init__(self):
    super(). __init__("Cappucino", 5.0)

class IngredientesExtras(Cafe, ABC):

  def __init__(self, descricao, preco, cafe):
    super().__init__(descricao, preco)
    self.cafe = cafe

  @abstractmethod
  def get_descricao(self):
    pass

  @abstractmethod
  def get_preco(self):
    pass

class LeiteVaporizado(IngredientesExtras):

  def __init__(self, cafe):
    super(). __init__("Leite Vaporizado", 2.0, cafe)

  def get_descricao(self):
    return self.cafe.get_descricao() + ", Leite Vaporizado"

  def get_preco(self):
    return self.cafe.get_preco() + self.preco

class Chocolate(IngredientesExtras):

  def __init__(self, cafe):
    super(). __init__("Chocolate", 3.0, cafe)

  def get_descricao(self):
    return self.cafe.get_descricao() + ", Chocolate"

  def get_preco(self):
    return self.cafe.get_preco() + self.preco

class Canela(IngredientesExtras):

  def __init__(self, cafe):
    super(). __init__("Canela", 2.0, cafe)

  def get_descricao(self):
    return self.cafe.get_descricao() + ", Canela"

  def get_preco(self):
    return self.cafe.get_preco() + self.preco

cafe1 = CafeSimples()
cafe1 = LeiteVaporizado(cafe1)
cafe1 = Chocolate(cafe1)
print(f"Todos Ingrediente = {cafe1.get_descricao()}")
print(f"Preço total = {cafe1.get_preco():.2f}")

print("")

cafe2 = Cappucino()
cafe2 = LeiteVaporizado(cafe2)
cafe2 = Chocolate(cafe2)
print(f"Todos Ingrediente = {cafe2.get_descricao()}")
print(f"Preço total = {cafe2.get_preco():.2f}")