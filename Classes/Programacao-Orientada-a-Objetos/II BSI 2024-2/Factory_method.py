# -*- coding: utf-8 -*-
"""Aula 04 - Padrões de Projeto - Factory Method

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1a3GcJ2YO0pcWeiDBDfnSe3Co6jMWbl0G

**1. Desenvolva o código para o diagrama de classes na figura abaixo, usando o padrão de design “Factory
Method”.**
"""

from abc import ABC, abstractmethod

# Classe abstrata para MotorVehicle
class MotorVehicle(ABC):
    @abstractmethod
    def build(self):
        pass

# Fábrica abstrata para MotorVehicle
class MotorVehicleFactory(ABC):
    @abstractmethod
    def Create(self):
        pass

    def CreateMotorVehicle(self):
        return self.Create()

# Fábrica concreta para Motorcycle
class MotorcycleFactory(MotorVehicleFactory):
    def Create(self):
        return Motorcycle()

# Fábrica concreta para Car
class CarFactory(MotorVehicleFactory):
    def Create(self):
        return Car()

# Classe concreta para Motorcycle
class Motorcycle(MotorVehicle):
    def build(self):
        print("Motorcycle built")

# Classe concreta para Car
class Car(MotorVehicle):
    def build(self):
        print("Car built")

# Função de teste para demonstrar a criação e construção dos veículos
def test_factory():
    # Criando as fábricas
    motorcycle_factory = MotorcycleFactory()
    car_factory = CarFactory()

    # Criando os veículos usando a função CreateMotorVehicle, que chama Create internamente
    motorcycle = motorcycle_factory.CreateMotorVehicle()
    car = car_factory.CreateMotorVehicle()

    # Construindo os veículos
    motorcycle.build()
    car.build()

# Executar o teste
test_factory()

"""**2. Desenvolva o código para o diagrama de classes na figura abaixo, usando o padrão de design “Factory
Method”.**
"""

from abc import ABC, abstractmethod

# Classe abstrata da fábrica de móveis
class FurnitureFactory(ABC):
    @abstractmethod
    def make_armchair(self, color, width, height, depth):
        pass

    @abstractmethod
    def make_coffee_table(self, color, width, height, depth):
        pass

    @abstractmethod
    def make_sofa(self, color, width, height, depth):
        pass


# Classe base para os produtos
class Product(ABC):
    def __init__(self, color):
        self.color = color

    def get_color(self):
        return self.color

    @abstractmethod
    def to_string(self):
        pass


# Produtos concretos
class Armchair(Product):
    def __init__(self, color, width, height, depth):
        super().__init__(color)
        self.width = width
        self.height = height
        self.depth = depth

    def to_string(self):
        return f"Armchair\nColor = {self.color}\nWidth = {self.width}\nHeight = {self.height}\nDepth = {self.depth}"


class CoffeeTable(Product):
    def __init__(self, color, width, height, depth):
        super().__init__(color)
        self.width = width
        self.height = height
        self.depth = depth

    def to_string(self):
        return f"CoffeeTable\nColor = {self.color}\nWidth = {self.width}\nHeight = {self.height}\nDepth = {self.depth}"


class Sofa(Product):
    def __init__(self, color, width, height, depth):
        super().__init__(color)
        self.width = width
        self.height = height
        self.depth = depth

    def to_string(self):
        return f"Sofa\nColor = {self.color}\nWidth = {self.width}\nHeight = {self.height}\nDepth = {self.depth}"


# Produtos Modernos Concretos
class ModernArmchair(Armchair):
    def __init__(self, color):
        super().__init__(color, width=100, height=50, depth=100)

    def to_string(self):
        return f"Modern Armchair\nColor = {self.color}\nWidth = {self.width}\nHeight = {self.height}\nDepth = {self.depth}"


class ModernCoffeeTable(CoffeeTable):
    def __init__(self, color):
        super().__init__(color, width=100, height=50, depth=100)

    def to_string(self):
        return f"Modern CoffeeTable\nColor = {self.color}\nWidth = {self.width}\nHeight = {self.height}\nDepth = {self.depth}"


class ModernSofa(Sofa):
    def __init__(self, color):
        super().__init__(color, width=100, height=50, depth=100)

    def to_string(self):
        return f"Modern Sofa\nColor = {self.color}\nWidth = {self.width}\nHeight = {self.height}\nDepth = {self.depth}"


# Fábrica concreta para móveis retro
class RetroFurnitureFactory(FurnitureFactory):
    def make_armchair(self, color, width, height, depth):
        return Armchair(color, width, height, depth)

    def make_coffee_table(self, color, width, height, depth):
        return CoffeeTable(color, width, height, depth)

    def make_sofa(self, color, width, height, depth):
        return Sofa(color, width, height, depth)


# Fábrica concreta para móveis modernos
class ModernFurnitureFactory(FurnitureFactory):
    def make_armchair(self, color, width=100, height=50, depth=100):
        return ModernArmchair(color)

    def make_coffee_table(self, color, width=100, height=50, depth=100):
        return ModernCoffeeTable(color)

    def make_sofa(self, color, width=100, height=50, depth=100):
        return ModernSofa(color)


# Exemplo de uso
retro_factory = RetroFurnitureFactory()
modern_factory = ModernFurnitureFactory()

# Criando produtos usando a fábrica retro
retro_armchair = retro_factory.make_armchair("brown", 80, 80, 80)
print("")
print(retro_armchair.to_string())

# Criando produtos usando a fábrica moderna
modern_sofa = modern_factory.make_sofa("white")
print("")
print(modern_sofa.to_string())