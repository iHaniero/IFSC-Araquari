# -*- coding: utf-8 -*-
"""Listas (Arrays)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GL7kwT4O7PxlkGrHuLsdBgCHLZagxnJk

**1) Inicializar um vetor de inteiros com números de 0 a 99.**
"""

lista = list(range(10))
print(lista)

"""**2) Escreva um algoritmo que leia um conjunto de 10 notas, armazene-as em uma variável
composta chamada NOTA e calcule e imprima a sua média.**
"""

nota = []

for i in range(3):
  nota.append(int(input("Nota ")))

soma_nota = sum(nota)
div = int(len(nota))

print(f"Média das notas {soma_nota/div}")

"""**3) Repita o algoritmo acima, porém imprima quantos valores estão acima da média.**"""

nota = []
ac_media = 0

for i in range(3):
  nota.append(int(input("Nota ")))
  if nota[i] >= 6:
    ac_media = ac_media + 1

print(f"{ac_media} notas estão acima da média")

"""**4) Faça um algoritmo que leia um vetor que contém as notas de 30 alunos. Imprima o maior
valor, o menor valor, a média da turma e a quantidade de notas abaixo da média.**
"""

notas = []

for i in range(5):
  notas.append(int(input("Nota ")))

notas.sort()

soma_notas = sum(notas)
div = int(len(notas))

print(f"Menor nota {notas[0]}")
print(f"Maior nota {notas[-1]}")
print(f"Média das notas {soma_notas/div}")

"""**5) Ler um vetor de 100 elementos numéricos e verificar se existem elementos iguais a 30. Se
existirem, escrever as posições em que estão armazenados.**
"""

vetor = list(range(1,51))
pos = []

for i in range(50):
  if vetor[i] == 30:
    pos.append(i)

print(pos)

import random as rand

pos = []
vetor = []

for i in range(51):
  vetor.append(str(rand.randrange(1,51)))


for i in range(len(vetor)):
  if vetor[i] == "30":
    pos.append(i)

print(pos)

"""**6) Fazer um algoritmo que calcule e escreva o somatório dos valores armazenados numa variável
composta unidimensional (vetor) A, de 100 elementos numéricos a serem lidos do dispositivo
de entrada.**
"""

vetor = list(range(10))

soma_vetor = sum(vetor)

print(soma_vetor)

"""**7) Escreva um algoritmo que leia um vetor de 200 valores numéricos reais e os imprima na
ordem contrária em que foi lida.**
"""

import random

vetor =[]

for i in range(51):
  vetor.append(random.randint(1,51))

print(vetor)

vetor.reverse()

print(vetor)

"""**8) Escreva um algoritmo para fazer a soma de dois vetores de 10 elementos reais lidos do
teclado. O primeiro elemento do primeiro vetor deverá ser adicionado ao primeiro elemento do
segundo vetor e, o resultado deverá ser acumulado em um terceiro vetor também de 10
elementos. Imprimir os três vetores conforme layout de impressão abaixo:**

**VETOR 1: __ __ __ __ __ __ __ __ __ __**

**VETOR 2: __ __ __ __ __ __ __ __ __ __**

**VETOR 3: __ __ __ __ __ __ __ __ __ __**
"""

import random

vetor1 = []
vetor2 = []
vetor3 = []

for i in range(10):
  vetor1.append(random.randint(1,10))
  vetor2.append(random.randint(1,10))
  vetor3.append(vetor1[i] + vetor2[i])

print(vetor1)
print(vetor2)
print(vetor3)

"""**9) Fazer um algoritmo que:**

**a) Leia duas variáveis compostas unidimensionais, contendo, cada uma, 25 elementos numéricos;**

**b) intercale os elementos desses dois conjuntos formando uma nova variável composta
unidimensional de 50 elementos;**

**c) Escreva o resultado obtido.**
"""

import random

vetor1 = []
vetor2 = []
vetor3 = []

for i in range(25):
  vetor1.append(random.randint(1,10))
  vetor2.append(random.randint(11,20))
  vetor3.append(vetor1[i])
  vetor3.append(vetor2[i])

print(vetor1)
print(vetor2)
print(vetor3)

"""**10) Escreva um algoritmo que:**

**a) leia 100 valores numéricos e os armazene numa variável composta unidimensional A;**

**b) calcule e escreva:**

**, onde ai é o i-ésimo valor armazenado na variável A;**

**c) calcule e escreva quantos termos da série acima têm o numerador menor do que o
denominador.**
"""

import random

S = 0
A = []
cont = 0

for i in range(100):
  A.append(random.randint(1,50))

for i in range(100):
  S = S + (i/A[i])
  if i < A[i]:
    cont = cont + 1

print("S =", S)
print(cont)

"""**11) Faça um algoritmo que leia um conjunto de 10 elementos reais e os coloque em um vetor.
Construa um segundo vetor formado da seguinte maneira:**

**• Os elementos de ordem par são os correspondentes do primeiro vetor multiplicados por 3.**

**• Os elementos de ordem ímpar são os correspondentes do primeiro vetor divididos por 2.**

**• Imprima os dois vetores.**
"""

import random

vetor1 = []
vetor2 = []

for i in range(10):
  vetor1.append(random.randint(1,10))
  if i%2 == 0:
    vetor2.append(vetor1[i] * 3)
  else:
    vetor2.append(vetor1[i] / 2)

print(vetor1)
print(vetor2)

"""**12) Escreva um algoritmo que:**

**a) leia um conjunto A de 20 elementos a partir de uma unidade de entrada;**

**b) calcule e imprima o valor de S, onde:**

**S = (A[0] - A[19])^2 + (A[1] - A[18])^2 + ... + (A[9] - A[10])^2**
"""

import random

vetor = []
S = 0
cont = 0

for i in range(20):
  vetor.append(random.randint(1,10))

for i in range(len(vetor)):
  S = S + (vetor[i] - vetor[19-i])**2

print(vetor)
print(S)

"""**13) Escreva um algoritmo que:**

**a) leia uma frase de 50 caracteres;**

**b) conte quantos brancos existem na frase;**

**c) conte quantas vezes a letra “A” aparece;**

**d) imprima o que foi calculado nos itens b e c.**
"""

s

branco = 0
A = 0

frase = input(f"Coloque a frase ")
letras = [letter for line in frase for letter in line.split()]

for i in range(len(letras)):
  if letras[i] == 'A' or letras[i] == 'a':
    A = A + 1
for i in range(len(frase)):
  if frase[i] == " ":
    branco = branco + 1

print(letras)
print(A)
print(branco)

"""**14) Um armazém trabalha com 100 mercadorias diferentes identificadas pelos números inteiros de
0 a 99. O dono do armazém anota a quantidade de cada mercadoria vendida durante o mês.
Ele tem uma tabela mensal que indica para cada mercadoria o preço de venda. Escreva o
algoritmo para calcular o faturamento mensal do armazém, isto é:**

**FATURAMENTO = (QUANTIDADEi*PREÇOi)**

**As tabelas de preço e quantidade são fornecidas em dois vetores.**
"""

import random

Fatu = 0
preco = []
itens = list(range(100))

for i in range(100):
  preco.append(random.randint(1,200))

for i in range(100):
  Fatu = itens[i] * preco[i]

print(Fatu)

"""**15) Classificar um vetor numérico VET de 20 elementos em ordem crescente.**"""

import random

vetor = []

for i in range(20):
  vetor.append(random.randint(1,20))

vetor.sort()

print(vetor)

"""**16) Dado um vetor de 128 elementos, verificar se existe um elemento igual a K (chave) no vetor.
Se existir, imprimir a posição onde foi encontrada a chave; se não; imprimir a mensagem:
“CHAVE K NÃO ENCONTRADA”. O vetor A e a chave K são lidos a partir de uma unidade de
entrada.**
"""

import random

K = int(input("Chave "))
vetor = []
pos = []

for i in range(100):
  vetor.append(random.randint(1,100))

for i in range(100):
  if vetor[i] == K:
    pos.append(i)

if pos == []:
  print(f"Chave K não encontrada")
else:
  print(pos)

"""**17) Refaça o algoritmo acima otimizando-o usando uma técnica conhecida por Pesquisa Binária.
Suponha primeiramente que o vetor já esteja ordenado. Procuramos então o elemento K
dividindo o vetor em duas partes e testando em qual das duas partes ele deveria estar.
Procede-se então, da mesma forma para a parte provável, e assim sucessivamente.
Obs.: na pesquisa sequencial simples (problema 16), o número médio de comparações que
devem ser feitas até encontrar a chave é N/2, onde N é o número de elementos do vetor. No
nosso caso, no algoritmo 16, teríamos, em média, 128/2 = 64 comparações. Na pesquisa
binária, o número máximo de comparações é log2N. Teríamos, então, log2128=7 comparações,
no máximo.**
"""

import random

K = int(input("Chave "))
vetor = []
vetor1 = []
vetor2 = []
pos = []

for i in range(100):
  vetor.append(random.randint(1,100))

vetor1 = vetor[:len(vetor)//2]
vetor2 = vetor[len(vetor)//2:]

for i in range(50):
  if vetor1[i] == K or vetor2[i] == K:
    pos.append(i)

print(vetor)
print(vetor1)
print(vetor2)
print(pos)