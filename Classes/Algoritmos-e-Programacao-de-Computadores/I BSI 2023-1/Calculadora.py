# -*- coding: utf-8 -*-
"""Calculadora Haniero

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WdCCKZIaptvSwm0xjgE2DAG-9JuRbGs_
"""

# Imports:

import textwrap as tw

# Variaveis:

print(f"Binário = B / Octal = O / Decimal = D / Hexadecimal = H")
print("")

while True:
    try:
        base = input("Base ")
        print("")
        base = base.upper()
        if base != "B" and base != "O" and base != "D" and base != "H":
            raise ValueError
        break
    except ValueError:
        print("Base invalida. A base deve estar entre Binário = B / Octal = O / Decimal = D / Hexadecimal = H")
        print("")

if base == "B":
  base = 2
elif base == "O":
  base = 8
elif base == "D":
  base = 10
elif base == "H":
  base = 16


if base == 2:

  while True:
    try:
        numstr = input("Número ")
        numstr = numstr.replace(" ", "")
        erro = 0
        print("")
        for i in range(len(numstr)):
          if numstr[i] not in ['0','1']:
            erro = erro + 1
        if numstr == "" or numstr == " ":
          erro = erro + 1
        if erro != 0:
            raise ValueError
        break
    except ValueError:
        print("Número invalida. Colocar digitos entre 0 e 1")
        print("")
        erro = 0

  print("")

  numstr = numstr.replace(" ", "")

  if len(numstr) % 3 == 0:
      numt = numstr
  elif len(numstr) % 3 == 1:
      numt = ("0"*2) + numstr
  elif len(numstr) % 3 == 2:
      numt = "0" + numstr

  if len(numstr) % 4 == 0:
      numq = numstr
  elif len(numstr) % 4 == 1:
      numq = ("0"*3) + numstr
  elif len(numstr) % 4 == 2:
      numq = ("0"*2) + numstr
  elif len(numstr) % 4 == 3:
      numq = "0" + numstr

  trio = tw.wrap(numt, 3)
  quad = tw.wrap(numq, 4)

elif base == 8:

  while True:
    try:
        numstr = input("Número entre 0 e 7 ")
        numstr = numstr.replace(" ", "")
        erro = 0
        print("")
        for i in range(len(numstr)):
          if numstr[i] not in ['0','1','2','3','4','5','6','7']:
            erro = erro + 1
        if numstr == "" or numstr == " ":
          erro = erro + 1
        if erro != 0:
            raise ValueError
        break
    except ValueError:
        print("Número invalida. Colocar digitos entre 0 e 7")
        print("")
        erro = 0

elif base == 10:

  while True:
    try:
        numstr = input("Número entre 0 e 9 ")
        numstr = numstr.replace(" ", "")
        erro = 0
        print("")
        for i in range(len(numstr)):
          if numstr[i] not in ['0','1','2','3','4','5','6','7','8','9']:
            erro = erro + 1
        if numstr == "" or numstr == " ":
          erro = erro + 1
        if erro != 0:
            raise ValueError
        break
    except ValueError:
        print("Número invalida. Colocar digitos entre 0 e 9")
        print("")
        erro = 0

  num = int(numstr)

elif base == 16:

  while True:
    try:
        numstr = input("Número entre 0 e F ")
        numstr = numstr.upper()
        numstr = numstr.replace(" ", "")
        erro = 0
        print("")
        for i in range(len(numstr)):
          if numstr[i] not in ["0","1","2","3","4","5","6","7","8","9","A","B","C","D","E","F"]:
            erro = erro + 1
        if numstr == "" or numstr == " ":
          erro = erro + 1
        if erro != 0:
            raise ValueError
        break
    except ValueError:
        print("Número invalida. Colocar digitos entre 0 e F")
        print("")
        erro = 0

  numl = list(numstr)
  numl_b = numl

  letra_num = {"A":"10", "B":"11", "C":"12", "D":"13", "E":"14", "F":"15"}
  trocar_l = letra_num.get
  numl = [trocar_l(n, n) for n in numl]


convertido_b = []
convertido_o = []
convertido_d = []
convertido_h = []
octalbin = ["000","001","010","011","100","101","110","111"]
binoctal = ["0","1","2","3","4","5","6","7"]
hexabin = ["0000","0001","0010","0011","0100","0101","0110","0111","1000","1001","1010","1011","1100","1101","1110","1111"]
binhexa = ["0","1","2","3","4","5","6","7","8","9","A","B","C","D","E","F"]
decimal = 0

# Binário para ___:

if base == 2:

  for j in range(len(numt)//3):
    for i in range(8):
      if trio[j] == octalbin[i]:
        convertido_o.append(binoctal[i])

  for j in range(len(numq)//4):
    for i in range(16):
      if quad[j] == hexabin[i]:
        convertido_h.append(binhexa[i])

  for i in range(len(numstr)):
    decimal = decimal + (int(numstr[-i-1]) * (base ** i))
  convertido_d.append(decimal)

  print(f"Octal {convertido_o}")
  print(f"Decimal {convertido_d}")
  print(f"Hexadecimal {convertido_h}")

#Octal para ___:

if base == 8:

  for j in range(len(numstr)):
    for i in range(8):
      if numstr[j] == binoctal[i]:
        convertido_b.append(octalbin[i])

  for i in range(len(numstr)):
    decimal = decimal + (int(numstr[-i-1]) * (base ** i))
  convertido_d.append(decimal)

  num_c = convertido_d[0]
  convertido_h.append(num_c % 16)
  while num_c >= 16:
    num_c = num_c // 16
    resto = num_c % 16
    convertido_h.append(resto)
  num_letra = {10:"A", 11:"B", 12:"C", 13:"D", 14:"E", 15:"F"}
  trocar_n = num_letra.get
  convertido_h = [trocar_n(n, n) for n in convertido_h]

  convertido_h.reverse()

  print(f"Binário {convertido_b}")
  print(f"Decimal {convertido_d}")
  print(f"Hexadecimal {convertido_h}")

# Decimal para ___:

elif base == 10:

  num_c = num

  convertido_b.append(num_c % 2)
  while num_c >= 2:
    num_c = num_c // 2
    resto = num_c % 2
    convertido_b.append(resto)

  num_c = num

  convertido_o.append(num_c % 8)
  while num_c >= 8:
    num_c = num_c // 8
    resto = num_c % 8
    convertido_o.append(resto)

  num_c = num

  convertido_h.append(num_c % 16)
  while num_c >= 16:
    num_c = num_c // 16
    resto = num_c % 16
    convertido_h.append(resto)
  num_letra = {10:"A", 11:"B", 12:"C", 13:"D", 14:"E", 15:"F"}
  trocar_n = num_letra.get
  convertido_h = [trocar_n(n, n) for n in convertido_h]

  convertido_b.reverse()
  convertido_o.reverse()
  convertido_h.reverse()

  print(f"Binário {convertido_b}")
  print(f"Octal {convertido_o}")
  print(f"Hexadecimal {convertido_h}")

#Hexadecimal para ___:

if base == 16:

  for j in range(len(numl_b)):
    for i in range(16):
      if numl_b[j] == binhexa[i]:
        convertido_b.append(hexabin[i])

  for i in range(len(numl)):
    decimal = decimal + (int(numl[-i-1]) * (base ** i))
  convertido_d.append(decimal)

  num_c = convertido_d[0]
  convertido_o.append(num_c % 8)
  while num_c >= 8:
    num_c = num_c // 8
    resto = num_c % 8
    convertido_o.append(resto)

  convertido_o.reverse()

  print(f"Binário {convertido_b}")
  print(f"Octal {convertido_o}")
  print(f"Decimal {convertido_d}")