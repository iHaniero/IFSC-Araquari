# -*- coding: utf-8 -*-
"""Tratamento de erros

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15MKPWdu07kNbVjCHEzLKr-hvlRTjww11

**1. Escreva uma função que recebe dois números como argumentos e retorna a
divisão do primeiro pelo segundo. Use um bloco try/except para tratar o caso em
que o segundo número é zero e lance uma exceção personalizada com a
mensagem "Divisão por zero não permitida".**
"""

while True:
  try:
    x = 10
    y = int(input("Divisor "))
    DIVI = x/y
  except ZeroDivisionError:
    print("Divisão por zero não permitida")
  else:
    break

print(DIVI)

"""**2. Escreva um programa que solicita ao usuário uma data no formato "dd/mm/aaaa"
e verifica se ela é válida. Use um bloco `try/except` para tratar o caso em que o
usuário digita uma data inválida e lance uma exceção personalizada com a
mensagem “Data inválida”.**
"""

while True:
  try:
    edia = 0
    emes = 0
    dia = int(input("Dia "))
    mes = int(input("Mês "))
    ano = int(input("Ano "))
    if dia > 31:
      edia = 1
      raise ValueError
    if mes > 12:
      emes = 1
      raise ValueError
  except ValueError:
    if edia > 0:
      print("Dia erado")
    if emes > 0:
      print("Mês errado")
  else:
    break

"""**3. Escreva uma função que recebe uma lista de números como argumento e retorna a
soma dos elementos da lista. Use um bloco `try/except` para tratar o caso em que
a lista contém algum elemento que não é um número e lance uma exceção
personalizada com a mensagem “Lista inválida”.**
"""

try:
  lista1 = [1,2,3,4,5]
  lista2 = [1,2,"a",3]
  soma1 = sum(lista1)
  print(soma1)
  soma2 = sum(lista2)
  print(soma2)
except:
  print("Lista inválida")

"""**4. Escreva um programa que solicita ao usuário um nome de arquivo e tenta abri-lo
para leitura. Use um bloco `try/except` para tratar o caso em que o arquivo não
existe ou não pode ser aberto e lance uma exceção personalizada com a
mensagem “Arquivo inválido”.**
"""

try:
  arq = input("Nome do arquivo ")
  open(arq,"r")
except:
  print("Arquivo inválido")

"""**5. Escreva um código que tente abrir um arquivo com o modo de escrita, porém o
arquivo já existe. Se ocorrer uma exceção, imprima uma mensagem de erro.**
"""

arq = open("opa","w")
arq.close()

try:
  arq = open("opa", "w")
except:
  print("Erro")

"""**6. Escreva uma função que recebe um número inteiro positivo como argumento e
retorna o fatorial desse número. Use um bloco `try/except` para tratar o caso em
que o argumento é negativo ou não é um inteiro e lance uma exceção
personalizada com a mensagem “Argumento inválido”.**
"""

import math

try:
  valor = int(input("Valor "))
  logarit = math.log(valor)
except ValueError:
  print("Argumento inválido")

"""**7. Escreva uma função que recebe uma string como argumento e retorna o número
de vogais contidas nessa string. Use um bloco `try/except` para tratar o caso em
que o argumento não é uma string e lance uma exceção personalizada com a
mensagem “Argumento inválido”.**
"""

try:
  vogais = 0
  linha = input("String ")
  for letter in linha:
    if letter in "aeiou":
      vogais = vogais + 1
    if letter in "123456789":
      raise TypeError
  print(vogais)
except TypeError:
  print("Argumento inválido")

"""**8. Escreva uma função que recebe uma lista de strings como argumento e retorna
uma nova lista com estas strings ordenadas alfabeticamente. Use um bloco
`try/except` para tratar o caso em que a lista contém algum elemento que não é
uma string e lance uma exceção personalizada com a mensagem “Lista inválida”.**
"""

try:
  lista = ["ae","ca","ba"]
  lista.sort()
  print(lista)
except TypeError:
  print("Lista inválida")

"""**9. Escreva um programa que solicite ao usuário um índice e, em seguida, tente
acessar um elemento em uma lista. Trate exceções caso o índice esteja fora dos
limites da lista.**
"""

try:
  lista = ["Banana","Macarrão","Maça"]
  print(lista[int(input("Índice "))])
except IndexError:
  print(f"Fora do limete da lista. Limite: {len(lista)-1}")
except:
  print("Não foi digitado um número")

"""**10. Peça ao usuário para digitar um número inteiro e, em seguida, tente converter
esse número em uma string. Trate a exceção que pode ocorrer.**
"""

try:
  num = int(input("Número a ser convertido "))
  numint = str(num)
except:
  print("Argumento invalido")

"""**11. Crie um programa que leia as configurações de um arquivo e trate exceções caso o
arquivo contenha erros de formatação.**
"""

try:
  arq = open("Não_Existo","r")
except IOError:
  print("Não é possivel ler este arquivo")

"""**12. Peça ao usuário para digitar uma chave e, em seguida, tente acessar um valor em
um dicionário. Trate exceções caso a chave não exista.**
"""

try:
  chave = input("Chave ")
  dic = {"1":"Banana", "2":"Macarrão", "3":"Maça"}
  print(dic[chave])
except KeyError:
  print("Esta chave não existe")

"""**13. Escreva um programa que trate uma exceção genérica, como `Exception`, e
imprima uma mensagem personalizada.**
"""

try:
  soma = 1 + "1"
except:
  print("Erro")

"""**14. Crie um programa que peça ao usuário para digitar uma senha com pelo menos 8
caracteres. Trate exceções caso a senha seja muito curta.**
"""

try:
  senha = input("Senha ")
  if len(senha) < 8:
    raise ValueError
except ValueError:
  print("Senha muito curta")

"""**15. Escreva um programa que divida uma lista em partes iguais e trate exceções se o
número de partes não for válido.**
"""

try:
  lista = ["a","b","c","d","e"]
  if (len(lista) % 2) != 0:
    raise ValueError
except ValueError:
  print("Quantia de elementos invalido")
else:
  parte1 = lista[:(len(lista)//2)]
  parte2 = lista[(len(lista)//2):]
  print(parte1)
  print(parte2)

"""**16. Escreva um programa que manipule múltiplas exceções em um bloco `try/except`.**"""

try:
  no_special_charac = 0
  senha = input("Senha ")
  if len(senha) < 8:
    raise ValueError
  for letter in senha:
    if letter not in "!@#$%&*+-?":
      no_special_charac = no_special_charac + 1
  if no_special_charac == len(senha):
    raise Exception("Senha sem characteres especiais")
except ValueError:
  print("Senha muito curta")
except:
  print("Senha sem characteres especiais")

"""**17. Escreva um programa que contenha um loop infinito e trate exceções para permitir
ao usuário interrompê-lo.**
"""

while True:
  try:
    cont = int(input("Continuar? "))
    if cont == 0:
      break
    x = int(input("Dividendo "))
    y = int(input("Divisor "))
    DIVI = x/y
    print(DIVI)
  except ZeroDivisionError:
    print("Divisão por zero não permitida")

"""**18. Crie um programa que trate exceções aninhadas em um bloco `try/except`.**"""



"""**19. Escreva um programa que utilize o bloco `else` para tratar exceções.**"""

cont = 1

while cont == 1:
  try:
    eggs = {"1":"Dapper","2":"Richarlyson","3":"Talulah"}
    search = input("Número ")
    print(eggs[search])
  except KeyError:
    print("Número não representa um ovo")
  else:
    cont = int(input("Tentar de novo / 1 = sim 0 = não "))
    if cont != 0 or cont != 1:
      raise Exception("Numero incorreto")